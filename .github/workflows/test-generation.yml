name: Automated Test Generation Pipeline

# Define the events that trigger the workflow
on:
  push:
    branches:
      - main
      - "feature/*"
    paths:
      - '**/*.py'
      - '**/*.js'
      - '**/*.ts'
      - '**/*.java'
      - '**/*.cpp'
      - '**/*.cs'
      - '**/*.go'

jobs:
  generate-tests:
    runs-on: ubuntu-latest
    environment: testgeneration
    permissions:
      contents: write
      pull-requests: write
    steps:
      # Checkout the repository
      - uses: actions/checkout@v4
        with:
          fetch-depth: 2  # Need at least 2 commits for comparison
          token: ${{ secrets.PAT_TOKEN }}
      
      # Set up Python environment
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.8'
      
      # Set up Go environment
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.20'  # Specify your desired Go version

      # Install Python dependencies
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests pytest

      # Tidy Go modules
      - name: Tidy Go Modules
        run: |
          go mod tidy
      
      # Detect changed files
      - name: Detect changed files
        id: changed-files
        run: |
          changed_files=$(git diff --name-only HEAD^ HEAD | grep -E '\.(py|js|ts|java|cpp|cs|go)$' || true)
          if [ -n "$changed_files" ]; then
            changed_files_sanitized=$(echo "$changed_files" | tr '\n' ' ')
            echo "CHANGED_FILES=$changed_files_sanitized" >> $GITHUB_ENV
            echo "Found changed files: $changed_files_sanitized"
          else
            echo "No relevant source files changed"
            exit 0
          fi
      
      # Run the test generation script
      - name: Run test generation script
        if: env.CHANGED_FILES != ''
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          OPENAI_MODEL: "gpt-4-turbo-preview"  # Set default model
          OPENAI_MAX_TOKENS: "2000"  # Set default max tokens
        run: |
          for file in ${{ env.CHANGED_FILES }}; do
            python generate_tests.py "$file"
          done
      
      # Format Generated Go Test Files
      - name: Format Generated Go Test Files
        if: env.CHANGED_FILES != ''
        run: |
          for file in ${{ env.CHANGED_FILES }}; do
            if [[ "$file" == *.go ]]; then
              test_file="${file%.*}_test.go"
              if [ -f "$test_file" ]; then
                go fmt "$test_file"
                echo "Formatted $test_file"
              else
                echo "Test file $test_file does not exist."
              fi
            fi
          done
      
      # Validate Go Test Files
      - name: Validate Go Test Files
        if: env.CHANGED_FILES != ''
        run: |
          for file in ${{ env.CHANGED_FILES }}; do
            if [[ "$file" == *.go ]]; then
              test_file="${file%.*}_test.go"
              if [ -f "$test_file" ]; then
                go vet "$test_file"
                echo "Validated $test_file with go vet"
              else
                echo "Test file $test_file does not exist."
              fi
            fi
          done
      
      # Generate Coverage Report for Go
      - name: Generate Coverage Report for Go
        if: env.CHANGED_FILES != '' && contains(env.CHANGED_FILES, '.go')
        run: |
          python generate_tests.py --coverage
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          OPENAI_MODEL: "gpt-4-turbo-preview"
          OPENAI_MAX_TOKENS: "2000"
      
      # Display Generated Go Test File Contents (Optional)
      - name: Display Generated Go Test Files
        if: env.CHANGED_FILES != ''
        run: |
          for file in ${{ env.CHANGED_FILES }}; do
            if [[ "$file" == *.go ]]; then
              test_file="${file%.*}_test.go"
              if [ -f "$test_file" ]; then
                echo "Contents of $test_file:"
                head -n 5 "$test_file"
              else
                echo "Test file $test_file does not exist."
              fi
            fi
          done
      
      # Create a unique branch name for the generated tests
      - name: Create unique branch name
        if: env.CHANGED_FILES != ''
        run: |
          branch_name="test-gen-$(date +%Y%m%d-%H%M%S)"
          echo "BRANCH_NAME=$branch_name" >> $GITHUB_ENV
      
      # Configure Git with a user for committing
      - name: Configure Git
        if: env.CHANGED_FILES != ''
        run: |
          git config --global user.name "GitHub Actions Bot"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
      
      # Check for changes before committing
      - name: Check for changes before commit
        if: env.CHANGED_FILES != ''
        run: |
          git status
          git diff --name-only
      
      # Commit and push changes
      - name: Commit and push changes
        if: env.CHANGED_FILES != ''
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          if [ -n "$(git status --porcelain)" ]; then
            git checkout -b ${{ env.BRANCH_NAME }}
            git add .
            git commit -m "Add generated test cases for recent changes"
            git push origin ${{ env.BRANCH_NAME }}
            echo "CHANGES_PUSHED=1" >> $GITHUB_ENV
          else
            echo "No changes to commit"
          fi
      
      # Upload Coverage Reports as Artifacts
      - name: Upload Coverage Reports
        if: env.CHANGED_FILES != ''
        uses: actions/upload-artifact@v3
        with:
          name: coverage-reports
          path: |
            coverage_report.html
            coverage_report.out
      
      # Create a Pull Request with the Generated Tests
      - name: Create Pull Request
        if: env.CHANGES_PUSHED == '1'
        uses: repo-sync/pull-request@v2
        with:
          github_token: ${{ secrets.PAT_TOKEN }}
          pr_title: ":sparkles: New Test Cases Generated"
          pr_body: |
            ## :robot_face: Automated Test Generation
            Generated test cases for the following files:
            
            ${{ env.CHANGED_FILES }}
    
            Please review these generated tests for:
            - Correctness
            - Coverage
            - Edge cases
            - Error handling
            Generated using OpenAI GPT-4
          destination_branch: "main"
          source_branch: ${{ env.BRANCH_NAME }}
